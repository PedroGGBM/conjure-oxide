language ESSENCE' 1.0

find x_PartitionOccurrence_NumParts: int(1..2)
find x_PartitionOccurrence_WhichPart: matrix indexed by [int(1..6)] of int(1..2)
find x_PartitionOccurrence_PartSizes: matrix indexed by [int(1..2)] of int(0..6)
find x_PartitionOccurrence_FirstIndex: matrix indexed by [int(1..2)] of int(1..6)
branching on
    [x_PartitionOccurrence_NumParts, x_PartitionOccurrence_WhichPart, x_PartitionOccurrence_PartSizes,
     x_PartitionOccurrence_FirstIndex]
such that
    and([q1 <= x_PartitionOccurrence_NumParts -> x_PartitionOccurrence_PartSizes[q1] <= 6 | q1 : int(1..2)]),
    and([q1 > x_PartitionOccurrence_NumParts -> x_PartitionOccurrence_PartSizes[q1] = 0 | q1 : int(1..2)]),
    2 = x_PartitionOccurrence_NumParts,
    2 <= x_PartitionOccurrence_NumParts -> x_PartitionOccurrence_PartSizes[1] = x_PartitionOccurrence_PartSizes[2],
    x_PartitionOccurrence_NumParts = max([x_PartitionOccurrence_WhichPart[q5] | q5 : int(1..6)]),
    and([x_PartitionOccurrence_PartSizes[q6] = sum([toInt(x_PartitionOccurrence_WhichPart[q7] = q6) | q7 : int(1..6)])
             | q6 : int(1..2)]),
    and([q8 <= x_PartitionOccurrence_NumParts ->
         and([x_PartitionOccurrence_WhichPart[q9] = q8 -> x_PartitionOccurrence_FirstIndex[q8] <= q9 | q9 : int(1..6)])
             | q8 : int(1..2)]),
    and([q8 <= x_PartitionOccurrence_NumParts ->
         or([x_PartitionOccurrence_WhichPart[q9] = q8 /\ x_PartitionOccurrence_FirstIndex[q8] = q9 | q9 : int(1..6)])
             | q8 : int(1..2)]),
    and([q8 > x_PartitionOccurrence_NumParts -> x_PartitionOccurrence_FirstIndex[q8] = 1 | q8 : int(1..2)]),
    and([q10 <= x_PartitionOccurrence_NumParts /\ q11 <= x_PartitionOccurrence_NumParts ->
         (q10 < q11 <-> x_PartitionOccurrence_FirstIndex[q10] < x_PartitionOccurrence_FirstIndex[q11])
             | q10 : int(1..2), q11 : int(1..2)])

