language ESSENCE' 1.0

find x_ExplicitVarSizeWithMarker_Marker: int(0..6)
find x_ExplicitVarSizeWithMarker_Values_isEven: matrix indexed by [int(1..6)] of bool
find x_ExplicitVarSizeWithMarker_Values_theVal: matrix indexed by [int(1..6)] of int(1..3)
find x_ExplicitVarSizeWithFlags_Flags: matrix indexed by [int(1..6)] of bool
find x_ExplicitVarSizeWithFlags_Values_isEven: matrix indexed by [int(1..6)] of bool
find x_ExplicitVarSizeWithFlags_Values_theVal: matrix indexed by [int(1..6)] of int(1..3)
branching on
    [x_ExplicitVarSizeWithFlags_Flags, x_ExplicitVarSizeWithFlags_Values_isEven,
     x_ExplicitVarSizeWithFlags_Values_theVal, x_ExplicitVarSizeWithMarker_Marker,
     x_ExplicitVarSizeWithMarker_Values_isEven, x_ExplicitVarSizeWithMarker_Values_theVal]
such that
    and([q17 <= x_ExplicitVarSizeWithMarker_Marker ->
         (x_ExplicitVarSizeWithMarker_Values_theVal[q17] % 2 = 0 <-> x_ExplicitVarSizeWithMarker_Values_isEven[q17])
             | q17 : int(1..6)]),
    and([q1 + 1 <= x_ExplicitVarSizeWithMarker_Marker ->
         flatten([[-toInt(x_ExplicitVarSizeWithMarker_Values_isEven[q1]); int(1)],
                  [x_ExplicitVarSizeWithMarker_Values_theVal[q1]; int(1)];
                      int(1..2)])
         <lex
         flatten([[-toInt(x_ExplicitVarSizeWithMarker_Values_isEven[q1 + 1]); int(1)],
                  [x_ExplicitVarSizeWithMarker_Values_theVal[q1 + 1]; int(1)];
                      int(1..2)])
             | q1 : int(1..5)]),
    and([q2 > x_ExplicitVarSizeWithMarker_Marker ->
         x_ExplicitVarSizeWithMarker_Values_isEven[q2] = false /\ x_ExplicitVarSizeWithMarker_Values_theVal[q2] = 1
             | q2 : int(1..6)]),
    and([x_ExplicitVarSizeWithFlags_Flags[q4 + 1] ->
         flatten([[-toInt(x_ExplicitVarSizeWithFlags_Values_isEven[q4]); int(1)],
                  [x_ExplicitVarSizeWithFlags_Values_theVal[q4]; int(1)];
                      int(1..2)])
         <lex
         flatten([[-toInt(x_ExplicitVarSizeWithFlags_Values_isEven[q4 + 1]); int(1)],
                  [x_ExplicitVarSizeWithFlags_Values_theVal[q4 + 1]; int(1)];
                      int(1..2)])
             | q4 : int(1..5)]),
    and([x_ExplicitVarSizeWithFlags_Flags[q5] = false ->
         x_ExplicitVarSizeWithFlags_Values_isEven[q5] = false /\ x_ExplicitVarSizeWithFlags_Values_theVal[q5] = 1
             | q5 : int(1..6)]),
    and([x_ExplicitVarSizeWithFlags_Flags[q6 + 1] -> x_ExplicitVarSizeWithFlags_Flags[q6] | q6 : int(1..5)]),
    and([x_ExplicitVarSizeWithFlags_Flags[q10] ->
         or([q12 <= x_ExplicitVarSizeWithMarker_Marker /\
             (x_ExplicitVarSizeWithMarker_Values_isEven[q12] = x_ExplicitVarSizeWithFlags_Values_isEven[q10] /\
              x_ExplicitVarSizeWithMarker_Values_theVal[q12] = x_ExplicitVarSizeWithFlags_Values_theVal[q10])
                 | q12 : int(1..6)])
             | q10 : int(1..6)]),
    and([q14 <= x_ExplicitVarSizeWithMarker_Marker ->
         or([x_ExplicitVarSizeWithFlags_Flags[q16] /\
             (x_ExplicitVarSizeWithFlags_Values_isEven[q16] = x_ExplicitVarSizeWithMarker_Values_isEven[q14] /\
              x_ExplicitVarSizeWithFlags_Values_theVal[q16] = x_ExplicitVarSizeWithMarker_Values_theVal[q14])
                 | q16 : int(1..6)])
             | q14 : int(1..6)])

