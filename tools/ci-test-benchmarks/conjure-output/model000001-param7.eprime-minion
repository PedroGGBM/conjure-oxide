MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 6
# CSE_active_eliminated_expressions = 12
# CSE_active_total_size = 18
**VARIABLES**
DISCRETE x_ExplicitWithFlags_Flags_00001 #
{0..2}
DISCRETE x_ExplicitWithFlags_Flags_00002 #
{0..2}
DISCRETE x_ExplicitWithFlags_Flags_00003 #
{0..2}
DISCRETE x_ExplicitWithFlags_Flags_00004 #
{0..2}
DISCRETE x_ExplicitWithFlags_Values_00001 #
{1..2}
DISCRETE x_ExplicitWithFlags_Values_00002 #
{1..2}
DISCRETE x_ExplicitWithFlags_Values_00003 #
{1..2}
DISCRETE x_ExplicitWithFlags_Values_00004 #
{1..2}
BOOL aux0 #Active-CSE: 2 occurrences of this expression or equivalent: (x_ExplicitWithFlags_Values_00002=x_ExplicitWithFlags_Values_00004)
BOOL aux1 #Active-CSE: 2 occurrences of this expression or equivalent: (x_ExplicitWithFlags_Values_00002=x_ExplicitWithFlags_Values_00003)
BOOL aux2 #Active-CSE: 2 occurrences of this expression or equivalent: (x_ExplicitWithFlags_Values_00003=x_ExplicitWithFlags_Values_00004)
BOOL aux3 #Active-CSE: 2 occurrences of this expression or equivalent: (x_ExplicitWithFlags_Values_00001=x_ExplicitWithFlags_Values_00003)
BOOL aux4 #Active-CSE: 2 occurrences of this expression or equivalent: (x_ExplicitWithFlags_Values_00001=x_ExplicitWithFlags_Values_00004)
BOOL aux5 #Active-CSE: 2 occurrences of this expression or equivalent: (x_ExplicitWithFlags_Values_00001=x_ExplicitWithFlags_Values_00002)
BOOL aux6 #(x_ExplicitWithFlags_Values_00001=2)
DISCRETE aux7 #(x_ExplicitWithFlags_Flags_00001 * aux6)
{0..2}
BOOL aux8 #(x_ExplicitWithFlags_Values_00002=2)
DISCRETE aux9 #(x_ExplicitWithFlags_Flags_00002 * aux8)
{0..2}
BOOL aux10 #(x_ExplicitWithFlags_Values_00003=2)
DISCRETE aux11 #(x_ExplicitWithFlags_Flags_00003 * aux10)
{0..2}
BOOL aux12 #(x_ExplicitWithFlags_Values_00004=2)
DISCRETE aux13 #(x_ExplicitWithFlags_Flags_00004 * aux12)
{0..2}
BOOL aux14 #(0<x_ExplicitWithFlags_Flags_00001)
DISCRETE aux15 #(x_ExplicitWithFlags_Flags_00002 * aux5)
{0..2}
DISCRETE aux16 #(x_ExplicitWithFlags_Flags_00003 * aux3)
{0..2}
DISCRETE aux17 #(x_ExplicitWithFlags_Flags_00004 * aux4)
{0..2}
BOOL aux18 #(x_ExplicitWithFlags_Values_00001=2)
BOOL aux19 #(0<x_ExplicitWithFlags_Flags_00002)
DISCRETE aux20 #(x_ExplicitWithFlags_Flags_00001 * aux5)
{0..2}
DISCRETE aux21 #(x_ExplicitWithFlags_Flags_00003 * aux1)
{0..2}
DISCRETE aux22 #(x_ExplicitWithFlags_Flags_00004 * aux0)
{0..2}
BOOL aux23 #(x_ExplicitWithFlags_Values_00002=2)
BOOL aux24 #(0<x_ExplicitWithFlags_Flags_00003)
DISCRETE aux25 #(x_ExplicitWithFlags_Flags_00001 * aux3)
{0..2}
DISCRETE aux26 #(x_ExplicitWithFlags_Flags_00002 * aux1)
{0..2}
DISCRETE aux27 #(x_ExplicitWithFlags_Flags_00004 * aux2)
{0..2}
BOOL aux28 #(x_ExplicitWithFlags_Values_00003=2)
BOOL aux29 #(0<x_ExplicitWithFlags_Flags_00004)
DISCRETE aux30 #(x_ExplicitWithFlags_Flags_00001 * aux4)
{0..2}
DISCRETE aux31 #(x_ExplicitWithFlags_Flags_00002 * aux0)
{0..2}
DISCRETE aux32 #(x_ExplicitWithFlags_Flags_00003 * aux2)
{0..2}
BOOL aux33 #(x_ExplicitWithFlags_Values_00004=2)
BOOL aux34 #(0<x_ExplicitWithFlags_Flags_00002)
BOOL aux35 #(0<x_ExplicitWithFlags_Flags_00003)
BOOL aux36 #(0<x_ExplicitWithFlags_Flags_00004)
BOOL aux37 #(x_ExplicitWithFlags_Flags_00001=0)
BOOL aux38 #(x_ExplicitWithFlags_Flags_00002=0)
BOOL aux39 #(x_ExplicitWithFlags_Flags_00003=0)
BOOL aux40 #(x_ExplicitWithFlags_Flags_00004=0)
BOOL aux41 #(0<x_ExplicitWithFlags_Flags_00002)
BOOL aux42 #(0<x_ExplicitWithFlags_Flags_00003)
BOOL aux43 #(0<x_ExplicitWithFlags_Flags_00004)
**VARIABLES**
ALIAS g_ExplicitWithFlags_Values[2]=[2, 1]
**VARIABLES**
ALIAS g_ExplicitWithFlags_Flags[2]=[2, 0]
**SEARCH**
PRINT[[x_ExplicitWithFlags_Flags_00001],[x_ExplicitWithFlags_Flags_00002],[x_ExplicitWithFlags_Flags_00003],[x_ExplicitWithFlags_Flags_00004],[x_ExplicitWithFlags_Values_00001],[x_ExplicitWithFlags_Values_00002],[x_ExplicitWithFlags_Values_00003],[x_ExplicitWithFlags_Values_00004]]
**CONSTRAINTS**
reify(w-literal(x_ExplicitWithFlags_Values_00001,2), aux6)
product(x_ExplicitWithFlags_Flags_00001, aux6, aux7)
reify(w-literal(x_ExplicitWithFlags_Values_00002,2), aux8)
product(x_ExplicitWithFlags_Flags_00002, aux8, aux9)
reify(w-literal(x_ExplicitWithFlags_Values_00003,2), aux10)
product(x_ExplicitWithFlags_Flags_00003, aux10, aux11)
reify(w-literal(x_ExplicitWithFlags_Values_00004,2), aux12)
product(x_ExplicitWithFlags_Flags_00004, aux12, aux13)
reify(ineq(0, x_ExplicitWithFlags_Flags_00001, -1), aux14)
product(x_ExplicitWithFlags_Flags_00002, aux5, aux15)
product(x_ExplicitWithFlags_Flags_00003, aux3, aux16)
product(x_ExplicitWithFlags_Flags_00004, aux4, aux17)
reify(w-literal(x_ExplicitWithFlags_Values_00001,2), aux18)
reify(ineq(0, x_ExplicitWithFlags_Flags_00002, -1), aux19)
product(x_ExplicitWithFlags_Flags_00001, aux5, aux20)
product(x_ExplicitWithFlags_Flags_00003, aux1, aux21)
product(x_ExplicitWithFlags_Flags_00004, aux0, aux22)
reify(w-literal(x_ExplicitWithFlags_Values_00002,2), aux23)
reify(ineq(0, x_ExplicitWithFlags_Flags_00003, -1), aux24)
product(x_ExplicitWithFlags_Flags_00001, aux3, aux25)
product(x_ExplicitWithFlags_Flags_00002, aux1, aux26)
product(x_ExplicitWithFlags_Flags_00004, aux2, aux27)
reify(w-literal(x_ExplicitWithFlags_Values_00003,2), aux28)
reify(ineq(0, x_ExplicitWithFlags_Flags_00004, -1), aux29)
product(x_ExplicitWithFlags_Flags_00001, aux4, aux30)
product(x_ExplicitWithFlags_Flags_00002, aux0, aux31)
product(x_ExplicitWithFlags_Flags_00003, aux2, aux32)
reify(w-literal(x_ExplicitWithFlags_Values_00004,2), aux33)
reify(ineq(0, x_ExplicitWithFlags_Flags_00002, -1), aux34)
reify(ineq(0, x_ExplicitWithFlags_Flags_00003, -1), aux35)
reify(ineq(0, x_ExplicitWithFlags_Flags_00004, -1), aux36)
reify(w-literal(x_ExplicitWithFlags_Flags_00001,0), aux37)
reify(w-literal(x_ExplicitWithFlags_Flags_00002,0), aux38)
reify(w-literal(x_ExplicitWithFlags_Flags_00003,0), aux39)
reify(w-literal(x_ExplicitWithFlags_Flags_00004,0), aux40)
reify(ineq(0, x_ExplicitWithFlags_Flags_00002, -1), aux41)
reify(ineq(0, x_ExplicitWithFlags_Flags_00003, -1), aux42)
reify(ineq(0, x_ExplicitWithFlags_Flags_00004, -1), aux43)
reify(gaceq(x_ExplicitWithFlags_Values_00002,x_ExplicitWithFlags_Values_00004), aux0)
reify(gaceq(x_ExplicitWithFlags_Values_00002,x_ExplicitWithFlags_Values_00003), aux1)
reify(gaceq(x_ExplicitWithFlags_Values_00003,x_ExplicitWithFlags_Values_00004), aux2)
reify(gaceq(x_ExplicitWithFlags_Values_00001,x_ExplicitWithFlags_Values_00003), aux3)
reify(gaceq(x_ExplicitWithFlags_Values_00001,x_ExplicitWithFlags_Values_00004), aux4)
reify(gaceq(x_ExplicitWithFlags_Values_00001,x_ExplicitWithFlags_Values_00002), aux5)
sumleq([x_ExplicitWithFlags_Flags_00001,x_ExplicitWithFlags_Flags_00002,x_ExplicitWithFlags_Flags_00003,x_ExplicitWithFlags_Flags_00004],4)
reifyimply(ineq(x_ExplicitWithFlags_Values_00001, x_ExplicitWithFlags_Values_00002, -1), aux34)
reifyimply(ineq(x_ExplicitWithFlags_Values_00002, x_ExplicitWithFlags_Values_00003, -1), aux35)
reifyimply(ineq(x_ExplicitWithFlags_Values_00003, x_ExplicitWithFlags_Values_00004, -1), aux36)
reifyimply(w-literal(x_ExplicitWithFlags_Values_00001,1), aux37)
reifyimply(w-literal(x_ExplicitWithFlags_Values_00002,1), aux38)
reifyimply(w-literal(x_ExplicitWithFlags_Values_00003,1), aux39)
reifyimply(w-literal(x_ExplicitWithFlags_Values_00004,1), aux40)
reifyimply(ineq(0, x_ExplicitWithFlags_Flags_00001, -1), aux41)
reifyimply(ineq(0, x_ExplicitWithFlags_Flags_00002, -1), aux42)
reifyimply(ineq(0, x_ExplicitWithFlags_Flags_00003, -1), aux43)
sumleq([aux7,aux9,aux11,aux13],2)
sumgeq([aux7,aux9,aux11,aux13],2)
reifyimply(weightedsumleq([-1,-1,-1,-1,2],[x_ExplicitWithFlags_Flags_00001,aux15,aux16,aux17,aux18],0), aux14)
reifyimply(weightedsumgeq([-1,-1,-1,-1,2],[x_ExplicitWithFlags_Flags_00001,aux15,aux16,aux17,aux18],0), aux14)
reifyimply(weightedsumleq([-1,-1,-1,-1,2],[x_ExplicitWithFlags_Flags_00002,aux20,aux21,aux22,aux23],0), aux19)
reifyimply(weightedsumgeq([-1,-1,-1,-1,2],[x_ExplicitWithFlags_Flags_00002,aux20,aux21,aux22,aux23],0), aux19)
reifyimply(weightedsumleq([-1,-1,-1,-1,2],[x_ExplicitWithFlags_Flags_00003,aux25,aux26,aux27,aux28],0), aux24)
reifyimply(weightedsumgeq([-1,-1,-1,-1,2],[x_ExplicitWithFlags_Flags_00003,aux25,aux26,aux27,aux28],0), aux24)
reifyimply(weightedsumleq([-1,-1,-1,-1,2],[x_ExplicitWithFlags_Flags_00004,aux30,aux31,aux32,aux33],0), aux29)
reifyimply(weightedsumgeq([-1,-1,-1,-1,2],[x_ExplicitWithFlags_Flags_00004,aux30,aux31,aux32,aux33],0), aux29)
**EOF**
