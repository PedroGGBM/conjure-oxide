MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 6
# CSE_active_eliminated_expressions = 12
# CSE_active_total_size = 18
**VARIABLES**
DISCRETE x_ExplicitWithFlags_Flags_00001 #
{0..2}
DISCRETE x_ExplicitWithFlags_Flags_00002 #
{0..2}
DISCRETE x_ExplicitWithFlags_Flags_00003 #
{0..2}
DISCRETE x_ExplicitWithFlags_Flags_00004 #
{0..2}
DISCRETE x_ExplicitWithFlags_Values_00001 #
{1..2}
DISCRETE x_ExplicitWithFlags_Values_00002 #
{1..2}
DISCRETE x_ExplicitWithFlags_Values_00003 #
{1..2}
DISCRETE x_ExplicitWithFlags_Values_00004 #
{1..2}
BOOL aux0 #Active-CSE: 2 occurrences of this expression or equivalent: (x_ExplicitWithFlags_Values_00002=x_ExplicitWithFlags_Values_00004)
BOOL aux1 #Active-CSE: 2 occurrences of this expression or equivalent: (x_ExplicitWithFlags_Values_00002=x_ExplicitWithFlags_Values_00003)
BOOL aux2 #Active-CSE: 2 occurrences of this expression or equivalent: (x_ExplicitWithFlags_Values_00003=x_ExplicitWithFlags_Values_00004)
BOOL aux3 #Active-CSE: 2 occurrences of this expression or equivalent: (x_ExplicitWithFlags_Values_00001=x_ExplicitWithFlags_Values_00003)
BOOL aux4 #Active-CSE: 2 occurrences of this expression or equivalent: (x_ExplicitWithFlags_Values_00001=x_ExplicitWithFlags_Values_00004)
BOOL aux5 #Active-CSE: 2 occurrences of this expression or equivalent: (x_ExplicitWithFlags_Values_00001=x_ExplicitWithFlags_Values_00002)
BOOL aux6 #(x_ExplicitWithFlags_Values_00001=1)
DISCRETE aux7 #(x_ExplicitWithFlags_Flags_00001 * aux6)
{0..2}
BOOL aux8 #(x_ExplicitWithFlags_Values_00002=1)
DISCRETE aux9 #(x_ExplicitWithFlags_Flags_00002 * aux8)
{0..2}
BOOL aux10 #(x_ExplicitWithFlags_Values_00003=1)
DISCRETE aux11 #(x_ExplicitWithFlags_Flags_00003 * aux10)
{0..2}
BOOL aux12 #(x_ExplicitWithFlags_Values_00004=1)
DISCRETE aux13 #(x_ExplicitWithFlags_Flags_00004 * aux12)
{0..2}
BOOL aux14 #(x_ExplicitWithFlags_Values_00001=2)
DISCRETE aux15 #(x_ExplicitWithFlags_Flags_00001 * aux14)
{0..2}
BOOL aux16 #(x_ExplicitWithFlags_Values_00002=2)
DISCRETE aux17 #(x_ExplicitWithFlags_Flags_00002 * aux16)
{0..2}
BOOL aux18 #(x_ExplicitWithFlags_Values_00003=2)
DISCRETE aux19 #(x_ExplicitWithFlags_Flags_00003 * aux18)
{0..2}
BOOL aux20 #(x_ExplicitWithFlags_Values_00004=2)
DISCRETE aux21 #(x_ExplicitWithFlags_Flags_00004 * aux20)
{0..2}
BOOL aux22 #(0<x_ExplicitWithFlags_Flags_00001)
DISCRETE aux23 #(x_ExplicitWithFlags_Flags_00002 * aux5)
{0..2}
DISCRETE aux24 #(x_ExplicitWithFlags_Flags_00003 * aux3)
{0..2}
DISCRETE aux25 #(x_ExplicitWithFlags_Flags_00004 * aux4)
{0..2}
BOOL aux26 #(x_ExplicitWithFlags_Values_00001=1)
BOOL aux27 #(x_ExplicitWithFlags_Values_00001=2)
BOOL aux28 #(0<x_ExplicitWithFlags_Flags_00002)
DISCRETE aux29 #(x_ExplicitWithFlags_Flags_00001 * aux5)
{0..2}
DISCRETE aux30 #(x_ExplicitWithFlags_Flags_00003 * aux1)
{0..2}
DISCRETE aux31 #(x_ExplicitWithFlags_Flags_00004 * aux0)
{0..2}
BOOL aux32 #(x_ExplicitWithFlags_Values_00002=1)
BOOL aux33 #(x_ExplicitWithFlags_Values_00002=2)
BOOL aux34 #(0<x_ExplicitWithFlags_Flags_00003)
DISCRETE aux35 #(x_ExplicitWithFlags_Flags_00001 * aux3)
{0..2}
DISCRETE aux36 #(x_ExplicitWithFlags_Flags_00002 * aux1)
{0..2}
DISCRETE aux37 #(x_ExplicitWithFlags_Flags_00004 * aux2)
{0..2}
BOOL aux38 #(x_ExplicitWithFlags_Values_00003=1)
BOOL aux39 #(x_ExplicitWithFlags_Values_00003=2)
BOOL aux40 #(0<x_ExplicitWithFlags_Flags_00004)
DISCRETE aux41 #(x_ExplicitWithFlags_Flags_00001 * aux4)
{0..2}
DISCRETE aux42 #(x_ExplicitWithFlags_Flags_00002 * aux0)
{0..2}
DISCRETE aux43 #(x_ExplicitWithFlags_Flags_00003 * aux2)
{0..2}
BOOL aux44 #(x_ExplicitWithFlags_Values_00004=1)
BOOL aux45 #(x_ExplicitWithFlags_Values_00004=2)
BOOL aux46 #(0<x_ExplicitWithFlags_Flags_00002)
BOOL aux47 #(0<x_ExplicitWithFlags_Flags_00003)
BOOL aux48 #(0<x_ExplicitWithFlags_Flags_00004)
BOOL aux49 #(x_ExplicitWithFlags_Flags_00001=0)
BOOL aux50 #(x_ExplicitWithFlags_Flags_00002=0)
BOOL aux51 #(x_ExplicitWithFlags_Flags_00003=0)
BOOL aux52 #(x_ExplicitWithFlags_Flags_00004=0)
BOOL aux53 #(0<x_ExplicitWithFlags_Flags_00002)
BOOL aux54 #(0<x_ExplicitWithFlags_Flags_00003)
BOOL aux55 #(0<x_ExplicitWithFlags_Flags_00004)
**VARIABLES**
ALIAS g_ExplicitWithFlags_Values[2]=[1, 2]
**VARIABLES**
ALIAS g_ExplicitWithFlags_Flags[2]=[1, 1]
**SEARCH**
PRINT[[x_ExplicitWithFlags_Flags_00001],[x_ExplicitWithFlags_Flags_00002],[x_ExplicitWithFlags_Flags_00003],[x_ExplicitWithFlags_Flags_00004],[x_ExplicitWithFlags_Values_00001],[x_ExplicitWithFlags_Values_00002],[x_ExplicitWithFlags_Values_00003],[x_ExplicitWithFlags_Values_00004]]
**CONSTRAINTS**
reify(w-literal(x_ExplicitWithFlags_Values_00001,1), aux6)
product(x_ExplicitWithFlags_Flags_00001, aux6, aux7)
reify(w-literal(x_ExplicitWithFlags_Values_00002,1), aux8)
product(x_ExplicitWithFlags_Flags_00002, aux8, aux9)
reify(w-literal(x_ExplicitWithFlags_Values_00003,1), aux10)
product(x_ExplicitWithFlags_Flags_00003, aux10, aux11)
reify(w-literal(x_ExplicitWithFlags_Values_00004,1), aux12)
product(x_ExplicitWithFlags_Flags_00004, aux12, aux13)
reify(w-literal(x_ExplicitWithFlags_Values_00001,2), aux14)
product(x_ExplicitWithFlags_Flags_00001, aux14, aux15)
reify(w-literal(x_ExplicitWithFlags_Values_00002,2), aux16)
product(x_ExplicitWithFlags_Flags_00002, aux16, aux17)
reify(w-literal(x_ExplicitWithFlags_Values_00003,2), aux18)
product(x_ExplicitWithFlags_Flags_00003, aux18, aux19)
reify(w-literal(x_ExplicitWithFlags_Values_00004,2), aux20)
product(x_ExplicitWithFlags_Flags_00004, aux20, aux21)
reify(ineq(0, x_ExplicitWithFlags_Flags_00001, -1), aux22)
product(x_ExplicitWithFlags_Flags_00002, aux5, aux23)
product(x_ExplicitWithFlags_Flags_00003, aux3, aux24)
product(x_ExplicitWithFlags_Flags_00004, aux4, aux25)
reify(w-literal(x_ExplicitWithFlags_Values_00001,1), aux26)
reify(w-literal(x_ExplicitWithFlags_Values_00001,2), aux27)
reify(ineq(0, x_ExplicitWithFlags_Flags_00002, -1), aux28)
product(x_ExplicitWithFlags_Flags_00001, aux5, aux29)
product(x_ExplicitWithFlags_Flags_00003, aux1, aux30)
product(x_ExplicitWithFlags_Flags_00004, aux0, aux31)
reify(w-literal(x_ExplicitWithFlags_Values_00002,1), aux32)
reify(w-literal(x_ExplicitWithFlags_Values_00002,2), aux33)
reify(ineq(0, x_ExplicitWithFlags_Flags_00003, -1), aux34)
product(x_ExplicitWithFlags_Flags_00001, aux3, aux35)
product(x_ExplicitWithFlags_Flags_00002, aux1, aux36)
product(x_ExplicitWithFlags_Flags_00004, aux2, aux37)
reify(w-literal(x_ExplicitWithFlags_Values_00003,1), aux38)
reify(w-literal(x_ExplicitWithFlags_Values_00003,2), aux39)
reify(ineq(0, x_ExplicitWithFlags_Flags_00004, -1), aux40)
product(x_ExplicitWithFlags_Flags_00001, aux4, aux41)
product(x_ExplicitWithFlags_Flags_00002, aux0, aux42)
product(x_ExplicitWithFlags_Flags_00003, aux2, aux43)
reify(w-literal(x_ExplicitWithFlags_Values_00004,1), aux44)
reify(w-literal(x_ExplicitWithFlags_Values_00004,2), aux45)
reify(ineq(0, x_ExplicitWithFlags_Flags_00002, -1), aux46)
reify(ineq(0, x_ExplicitWithFlags_Flags_00003, -1), aux47)
reify(ineq(0, x_ExplicitWithFlags_Flags_00004, -1), aux48)
reify(w-literal(x_ExplicitWithFlags_Flags_00001,0), aux49)
reify(w-literal(x_ExplicitWithFlags_Flags_00002,0), aux50)
reify(w-literal(x_ExplicitWithFlags_Flags_00003,0), aux51)
reify(w-literal(x_ExplicitWithFlags_Flags_00004,0), aux52)
reify(ineq(0, x_ExplicitWithFlags_Flags_00002, -1), aux53)
reify(ineq(0, x_ExplicitWithFlags_Flags_00003, -1), aux54)
reify(ineq(0, x_ExplicitWithFlags_Flags_00004, -1), aux55)
reify(gaceq(x_ExplicitWithFlags_Values_00002,x_ExplicitWithFlags_Values_00004), aux0)
reify(gaceq(x_ExplicitWithFlags_Values_00002,x_ExplicitWithFlags_Values_00003), aux1)
reify(gaceq(x_ExplicitWithFlags_Values_00003,x_ExplicitWithFlags_Values_00004), aux2)
reify(gaceq(x_ExplicitWithFlags_Values_00001,x_ExplicitWithFlags_Values_00003), aux3)
reify(gaceq(x_ExplicitWithFlags_Values_00001,x_ExplicitWithFlags_Values_00004), aux4)
reify(gaceq(x_ExplicitWithFlags_Values_00001,x_ExplicitWithFlags_Values_00002), aux5)
sumleq([x_ExplicitWithFlags_Flags_00001,x_ExplicitWithFlags_Flags_00002,x_ExplicitWithFlags_Flags_00003,x_ExplicitWithFlags_Flags_00004],4)
reifyimply(ineq(x_ExplicitWithFlags_Values_00001, x_ExplicitWithFlags_Values_00002, -1), aux46)
reifyimply(ineq(x_ExplicitWithFlags_Values_00002, x_ExplicitWithFlags_Values_00003, -1), aux47)
reifyimply(ineq(x_ExplicitWithFlags_Values_00003, x_ExplicitWithFlags_Values_00004, -1), aux48)
reifyimply(w-literal(x_ExplicitWithFlags_Values_00001,1), aux49)
reifyimply(w-literal(x_ExplicitWithFlags_Values_00002,1), aux50)
reifyimply(w-literal(x_ExplicitWithFlags_Values_00003,1), aux51)
reifyimply(w-literal(x_ExplicitWithFlags_Values_00004,1), aux52)
reifyimply(ineq(0, x_ExplicitWithFlags_Flags_00001, -1), aux53)
reifyimply(ineq(0, x_ExplicitWithFlags_Flags_00002, -1), aux54)
reifyimply(ineq(0, x_ExplicitWithFlags_Flags_00003, -1), aux55)
sumleq([aux7,aux9,aux11,aux13],1)
sumgeq([aux7,aux9,aux11,aux13],1)
sumleq([aux15,aux17,aux19,aux21],1)
sumgeq([aux15,aux17,aux19,aux21],1)
reifyimply(weightedsumleq([-1,-1,-1,-1,1,1],[x_ExplicitWithFlags_Flags_00001,aux23,aux24,aux25,aux26,aux27],0), aux22)
reifyimply(weightedsumgeq([-1,-1,-1,-1,1,1],[x_ExplicitWithFlags_Flags_00001,aux23,aux24,aux25,aux26,aux27],0), aux22)
reifyimply(weightedsumleq([-1,-1,-1,-1,1,1],[x_ExplicitWithFlags_Flags_00002,aux29,aux30,aux31,aux32,aux33],0), aux28)
reifyimply(weightedsumgeq([-1,-1,-1,-1,1,1],[x_ExplicitWithFlags_Flags_00002,aux29,aux30,aux31,aux32,aux33],0), aux28)
reifyimply(weightedsumleq([-1,-1,-1,-1,1,1],[x_ExplicitWithFlags_Flags_00003,aux35,aux36,aux37,aux38,aux39],0), aux34)
reifyimply(weightedsumgeq([-1,-1,-1,-1,1,1],[x_ExplicitWithFlags_Flags_00003,aux35,aux36,aux37,aux38,aux39],0), aux34)
reifyimply(weightedsumleq([-1,-1,-1,-1,1,1],[x_ExplicitWithFlags_Flags_00004,aux41,aux42,aux43,aux44,aux45],0), aux40)
reifyimply(weightedsumgeq([-1,-1,-1,-1,1,1],[x_ExplicitWithFlags_Flags_00004,aux41,aux42,aux43,aux44,aux45],0), aux40)
**EOF**
