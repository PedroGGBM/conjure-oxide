language ESSENCE' 1.0

find x_ExplicitVarSizeWithFlags_Flags: matrix indexed by [int(1..6)] of bool
find x_ExplicitVarSizeWithFlags_Values_isEven: matrix indexed by [int(1..6)] of bool
find x_ExplicitVarSizeWithFlags_Values_theVal: matrix indexed by [int(1..6)] of int(1..3)
branching on
    [x_ExplicitVarSizeWithFlags_Flags, x_ExplicitVarSizeWithFlags_Values_isEven,
     x_ExplicitVarSizeWithFlags_Values_theVal]
such that
    and([x_ExplicitVarSizeWithFlags_Flags[q6] ->
         (x_ExplicitVarSizeWithFlags_Values_theVal[q6] % 2 = 0 <-> x_ExplicitVarSizeWithFlags_Values_isEven[q6])
             | q6 : int(1..6)]),
    and([x_ExplicitVarSizeWithFlags_Flags[q1 + 1] ->
         flatten([[-toInt(x_ExplicitVarSizeWithFlags_Values_isEven[q1]); int(1)],
                  [x_ExplicitVarSizeWithFlags_Values_theVal[q1]; int(1)];
                      int(1..2)])
         <lex
         flatten([[-toInt(x_ExplicitVarSizeWithFlags_Values_isEven[q1 + 1]); int(1)],
                  [x_ExplicitVarSizeWithFlags_Values_theVal[q1 + 1]; int(1)];
                      int(1..2)])
             | q1 : int(1..5)]),
    and([x_ExplicitVarSizeWithFlags_Flags[q2] = false ->
         x_ExplicitVarSizeWithFlags_Values_isEven[q2] = false /\ x_ExplicitVarSizeWithFlags_Values_theVal[q2] = 1
             | q2 : int(1..6)]),
    and([x_ExplicitVarSizeWithFlags_Flags[q3 + 1] -> x_ExplicitVarSizeWithFlags_Flags[q3] | q3 : int(1..5)])

