language ESSENCE' 1.0

find x_ExplicitVarSizeWithMarker_Marker: int(0..6)
find x_ExplicitVarSizeWithMarker_Values_isEven: matrix indexed by [int(1..6)] of bool
find x_ExplicitVarSizeWithMarker_Values_theVal: matrix indexed by [int(1..6)] of int(1..3)
branching on
    [x_ExplicitVarSizeWithMarker_Marker, x_ExplicitVarSizeWithMarker_Values_isEven,
     x_ExplicitVarSizeWithMarker_Values_theVal]
such that
    and([q4 <= x_ExplicitVarSizeWithMarker_Marker ->
         (x_ExplicitVarSizeWithMarker_Values_theVal[q4] % 2 = 0 <-> x_ExplicitVarSizeWithMarker_Values_isEven[q4])
             | q4 : int(1..6)]),
    and([q1 + 1 <= x_ExplicitVarSizeWithMarker_Marker ->
         flatten([[-toInt(x_ExplicitVarSizeWithMarker_Values_isEven[q1]); int(1)],
                  [x_ExplicitVarSizeWithMarker_Values_theVal[q1]; int(1)];
                      int(1..2)])
         <lex
         flatten([[-toInt(x_ExplicitVarSizeWithMarker_Values_isEven[q1 + 1]); int(1)],
                  [x_ExplicitVarSizeWithMarker_Values_theVal[q1 + 1]; int(1)];
                      int(1..2)])
             | q1 : int(1..5)]),
    and([q2 > x_ExplicitVarSizeWithMarker_Marker ->
         x_ExplicitVarSizeWithMarker_Values_isEven[q2] = false /\ x_ExplicitVarSizeWithMarker_Values_theVal[q2] = 1
             | q2 : int(1..6)])

