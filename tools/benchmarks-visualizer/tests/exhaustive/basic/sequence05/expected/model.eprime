language ESSENCE' 1.0

find x_ExplicitBounded_Length: int(4)
find x_ExplicitBounded_Values: matrix indexed by [int(1..4)] of int(1..3)
find conjure_aux1_ExplicitBounded_Length: int(0..2)
find conjure_aux1_ExplicitBounded_Values: matrix indexed by [int(1..2)] of int(1..4)
branching on [x_ExplicitBounded_Length, x_ExplicitBounded_Values]
such that
    and([!or([and([i = x_ExplicitBounded_Values[q2 + q4] /\ q2 + q4 <= 4 | q4 : int(1..2)]) | q2 : int(0..3)])
             | i : int(1..3)]),
    and([q7 > conjure_aux1_ExplicitBounded_Length -> conjure_aux1_ExplicitBounded_Values[q7] = 1 | q7 : int(1..2)]),
    conjure_aux1_ExplicitBounded_Length <= 2,
    2 <= conjure_aux1_ExplicitBounded_Length ->
    conjure_aux1_ExplicitBounded_Values[1] < conjure_aux1_ExplicitBounded_Values[2] /\
    1 <= conjure_aux1_ExplicitBounded_Length
    /\ 2 <= conjure_aux1_ExplicitBounded_Length,
    2 = sum([toInt(q9 <= conjure_aux1_ExplicitBounded_Length) | q9 : int(1..2)]),
    and([and([[1, 3; int(1..2)][q10] = x_ExplicitBounded_Values[conjure_aux1_ExplicitBounded_Values[q10]],
              q10 <= conjure_aux1_ExplicitBounded_Length,
              conjure_aux1_ExplicitBounded_Values[q10] <= 4 /\ q10 <= conjure_aux1_ExplicitBounded_Length;
                  int(1..3)])
             | q10 : int(1..2)]),
    !or([and([[1, 3; int(1..2)][q13] = x_ExplicitBounded_Values[q11 + q13] /\ q11 + q13 <= 4 | q13 : int(1..2)])
             | q11 : int(0..3)])

