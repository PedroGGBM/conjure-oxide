language ESSENCE' 1.0

given n: int
find flags: matrix indexed by [int(1..n)] of bool
find val: matrix indexed by [int(1..n)] of int(1..3)
find x: int(n)
find conjure_aux1_Occurrence: matrix indexed by [int(1..3)] of bool
branching on [flags, val, x]
such that
    and([flags[j] -> conjure_aux1_Occurrence[val[j]] | j : int(1..n)]),
    and([conjure_aux1_Occurrence[q3] -> or([flags[j] /\ q3 = val[j] | j : int(1..n)]) | q3 : int(1..3)]),
    n = sum([toInt(conjure_aux1_Occurrence[i]) * catchUndef(i, 0) | i : int(1..3)]),
    and([flags[i] | i : int(1..n)]),
    and([val[i] <= val[i + 1] | i : int(1..n - 1)])

